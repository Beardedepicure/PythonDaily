# the basis of Python is objects
# Everything is an object. 
# this is a cheat sheet/learning excecise

Truth value testing - 0 means false (int dec, hex, fraction(0) Decimal(0) all return the boolean false.
Boolean operations - [OR] if there is any T then T, [AND] if T for all then T, [NOT] T=F AND F=T
note: [NOT] a == b should be NOT (A == B)

< strictly less, <= less than or Equal, > strickly greater, >= greater than or eqaul
== equal != not equal, [is] object identity, [is not] negated object identity
  Note: __eq__() defines the classes ablilty to be compared and found as equal
  Note: __lt__(),__le__(),__gt__(),__ge__() and __eq__() should be defined for ordering
  [in] and [in not] are for iterable data types and classes containing __contains__()
  
  Numerics
  Int, Float, Complex
  operations (+,-,*,/,// [quotient], [%]remainder, -x [negated],+x,abs(),
  [conversions]int(), flaot(), complex(real,imaginary), c.conjugate()?, divmod(x,y) 
  pow(x,y), x ** y. 
  
bitwise. operations that manipulte individual bits. 
bit.length()


for i in range (80000000000): #iterate over 
  i=[binryconversion](i)
  for b in i:
    count=0
    if b==1:
      count=count+1
  if count=1:
    return True
  else:
    return False
    
Alternative
for i in range(40)
  d='1'
  if i==0:
    return 0
  elif i==1:
    return b.d
  elif:
    for z in i:
      d.append(0)
      return b.d
    
  concat
  
  concat
